// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: measurement.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SensateService.Protobuf {

  /// <summary>Holder for reflection information generated from measurement.proto</summary>
  public static partial class MeasurementReflection {

    #region Descriptor
    /// <summary>File descriptor for measurement.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MeasurementReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFtZWFzdXJlbWVudC5wcm90bxIKc2Vuc2F0ZWlvdCJaCglEYXRhUG9pbnQS",
            "DQoFdmFsdWUYASABKAESDAoEdW5pdBgCIAEoCRIQCghhY2N1cmFjeRgDIAEo",
            "ARIRCglwcmVjaXNpb24YBCABKAESCwoDa2V5GAUgASgJIpkBCgtNZWFzdXJl",
            "bWVudBIpCgpkYXRhcG9pbnRzGAEgAygLMhUuc2Vuc2F0ZWlvdC5EYXRhUG9p",
            "bnQSEAoIbGF0aXR1ZGUYAiABKAESEQoJbG9uZ2l0dWRlGAMgASgBEhQKDHBs",
            "YXRmb3JtVGltZRgEIAEoCRIRCgl0aW1lc3RhbXAYBSABKAkSEQoJc2Vuc29y",
            "X2lkGAYgASgJIkAKD01lYXN1cmVtZW50RGF0YRItCgxtZWFzdXJlbWVudHMY",
            "ASADKAsyFy5zZW5zYXRlaW90Lk1lYXN1cmVtZW50QhqqAhdTZW5zYXRlU2Vy",
            "dmljZS5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SensateService.Protobuf.DataPoint), global::SensateService.Protobuf.DataPoint.Parser, new[]{ "Value", "Unit", "Accuracy", "Precision", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensateService.Protobuf.Measurement), global::SensateService.Protobuf.Measurement.Parser, new[]{ "Datapoints", "Latitude", "Longitude", "PlatformTime", "Timestamp", "SensorId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SensateService.Protobuf.MeasurementData), global::SensateService.Protobuf.MeasurementData.Parser, new[]{ "Measurements" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DataPoint : pb::IMessage<DataPoint> {
    private static readonly pb::MessageParser<DataPoint> _parser = new pb::MessageParser<DataPoint>(() => new DataPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensateService.Protobuf.MeasurementReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint(DataPoint other) : this() {
      value_ = other.value_;
      unit_ = other.unit_;
      accuracy_ = other.accuracy_;
      precision_ = other.precision_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataPoint Clone() {
      return new DataPoint(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private double value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 2;
    private string unit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Unit {
      get { return unit_; }
      set {
        unit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "accuracy" field.</summary>
    public const int AccuracyFieldNumber = 3;
    private double accuracy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Accuracy {
      get { return accuracy_; }
      set {
        accuracy_ = value;
      }
    }

    /// <summary>Field number for the "precision" field.</summary>
    public const int PrecisionFieldNumber = 4;
    private double precision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Precision {
      get { return precision_; }
      set {
        precision_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 5;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Value, other.Value)) return false;
      if (Unit != other.Unit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Accuracy, other.Accuracy)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Precision, other.Precision)) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Value);
      if (Unit.Length != 0) hash ^= Unit.GetHashCode();
      if (Accuracy != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Accuracy);
      if (Precision != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Precision);
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Value);
      }
      if (Unit.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Unit);
      }
      if (Accuracy != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Accuracy);
      }
      if (Precision != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Precision);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0D) {
        size += 1 + 8;
      }
      if (Unit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Unit);
      }
      if (Accuracy != 0D) {
        size += 1 + 8;
      }
      if (Precision != 0D) {
        size += 1 + 8;
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataPoint other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0D) {
        Value = other.Value;
      }
      if (other.Unit.Length != 0) {
        Unit = other.Unit;
      }
      if (other.Accuracy != 0D) {
        Accuracy = other.Accuracy;
      }
      if (other.Precision != 0D) {
        Precision = other.Precision;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Value = input.ReadDouble();
            break;
          }
          case 18: {
            Unit = input.ReadString();
            break;
          }
          case 25: {
            Accuracy = input.ReadDouble();
            break;
          }
          case 33: {
            Precision = input.ReadDouble();
            break;
          }
          case 42: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Measurement : pb::IMessage<Measurement> {
    private static readonly pb::MessageParser<Measurement> _parser = new pb::MessageParser<Measurement>(() => new Measurement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Measurement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensateService.Protobuf.MeasurementReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement(Measurement other) : this() {
      datapoints_ = other.datapoints_.Clone();
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      platformTime_ = other.platformTime_;
      timestamp_ = other.timestamp_;
      sensorId_ = other.sensorId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Measurement Clone() {
      return new Measurement(this);
    }

    /// <summary>Field number for the "datapoints" field.</summary>
    public const int DatapointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SensateService.Protobuf.DataPoint> _repeated_datapoints_codec
        = pb::FieldCodec.ForMessage(10, global::SensateService.Protobuf.DataPoint.Parser);
    private readonly pbc::RepeatedField<global::SensateService.Protobuf.DataPoint> datapoints_ = new pbc::RepeatedField<global::SensateService.Protobuf.DataPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SensateService.Protobuf.DataPoint> Datapoints {
      get { return datapoints_; }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 2;
    private double latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 3;
    private double longitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "platformTime" field.</summary>
    public const int PlatformTimeFieldNumber = 4;
    private string platformTime_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlatformTime {
      get { return platformTime_; }
      set {
        platformTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private string timestamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sensor_id" field.</summary>
    public const int SensorIdFieldNumber = 6;
    private string sensorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SensorId {
      get { return sensorId_; }
      set {
        sensorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Measurement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Measurement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!datapoints_.Equals(other.datapoints_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
      if (PlatformTime != other.PlatformTime) return false;
      if (Timestamp != other.Timestamp) return false;
      if (SensorId != other.SensorId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= datapoints_.GetHashCode();
      if (Latitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Latitude);
      if (Longitude != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Longitude);
      if (PlatformTime.Length != 0) hash ^= PlatformTime.GetHashCode();
      if (Timestamp.Length != 0) hash ^= Timestamp.GetHashCode();
      if (SensorId.Length != 0) hash ^= SensorId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      datapoints_.WriteTo(output, _repeated_datapoints_codec);
      if (Latitude != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Longitude);
      }
      if (PlatformTime.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlatformTime);
      }
      if (Timestamp.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Timestamp);
      }
      if (SensorId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(SensorId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += datapoints_.CalculateSize(_repeated_datapoints_codec);
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (PlatformTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformTime);
      }
      if (Timestamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Timestamp);
      }
      if (SensorId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SensorId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Measurement other) {
      if (other == null) {
        return;
      }
      datapoints_.Add(other.datapoints_);
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.PlatformTime.Length != 0) {
        PlatformTime = other.PlatformTime;
      }
      if (other.Timestamp.Length != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.SensorId.Length != 0) {
        SensorId = other.SensorId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            datapoints_.AddEntriesFrom(input, _repeated_datapoints_codec);
            break;
          }
          case 17: {
            Latitude = input.ReadDouble();
            break;
          }
          case 25: {
            Longitude = input.ReadDouble();
            break;
          }
          case 34: {
            PlatformTime = input.ReadString();
            break;
          }
          case 42: {
            Timestamp = input.ReadString();
            break;
          }
          case 50: {
            SensorId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeasurementData : pb::IMessage<MeasurementData> {
    private static readonly pb::MessageParser<MeasurementData> _parser = new pb::MessageParser<MeasurementData>(() => new MeasurementData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeasurementData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SensateService.Protobuf.MeasurementReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementData(MeasurementData other) : this() {
      measurements_ = other.measurements_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeasurementData Clone() {
      return new MeasurementData(this);
    }

    /// <summary>Field number for the "measurements" field.</summary>
    public const int MeasurementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SensateService.Protobuf.Measurement> _repeated_measurements_codec
        = pb::FieldCodec.ForMessage(10, global::SensateService.Protobuf.Measurement.Parser);
    private readonly pbc::RepeatedField<global::SensateService.Protobuf.Measurement> measurements_ = new pbc::RepeatedField<global::SensateService.Protobuf.Measurement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SensateService.Protobuf.Measurement> Measurements {
      get { return measurements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeasurementData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeasurementData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!measurements_.Equals(other.measurements_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= measurements_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      measurements_.WriteTo(output, _repeated_measurements_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += measurements_.CalculateSize(_repeated_measurements_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeasurementData other) {
      if (other == null) {
        return;
      }
      measurements_.Add(other.measurements_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            measurements_.AddEntriesFrom(input, _repeated_measurements_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
